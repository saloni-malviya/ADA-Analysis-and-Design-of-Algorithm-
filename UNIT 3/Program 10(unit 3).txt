//Create a flowchart for a dynamic programming algorithm that solves the longest common substring problem.Analyze the time and space complexity of the algorithm and compare it with the time and space complexity of a brute-force approach.  

Initialize two matrices:

A matrix M of size (n+1) x (m+1), where n and m are the lengths of the two input strings
A variable max_len to keep track of the maximum length of the common substring seen so far
For i from 0 to n:
a. For j from 0 to m:
i. If i=0 or j=0, set M[i][j] = 0
ii. If the i-th character of string 1 is the same as the j-th character of string 2, set M[i][j] = M[i-1][j-1] + 1
iii. Otherwise, set M[i][j] = 0
iv. If M[i][j] is greater than max_len, update max_len to M[i][j]

Return max_len as the length of the longest common substring


//Analyze the time and space complexity of the algorithm and compare it with the time and space complexity of a brute-force approach. 

To analyze the time and space complexity of the dynamic programming algorithm for the longest common substring problem, we need to consider the following:

Time complexity: The algorithm computes the length of the longest common substring by filling in a matrix of size 
(m+1)x(n+1), where m and n are the lengths of the input strings. Each entry in the matrix takes O(1) time to compute, 
so the total time complexity of the algorithm is O(mn).

Space complexity: The algorithm requires a matrix of size (m+1)x(n+1) to store the lengths of the common substrings. 
Therefore, the space complexity of the algorithm is O(mn).

In comparison, a brute-force approach would involve comparing each substring of one
string with each substring of the other string, which takes O(m^2*n^2) time in the worst case,
and O(1) space. Therefore, the dynamic programming algorithm is much more efficient in terms of time complexity, while using more space.